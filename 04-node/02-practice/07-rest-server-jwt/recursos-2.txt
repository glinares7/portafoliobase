
autenticación jwt 


    jsonwebtoken 8.5.1

    "start":"node app.js"




    ./model/server
        class Server{
            constructor(){
        this.authPath='/api/auth'

        this.routes()

            }


    routes(){
        this.app.use(this.authPath,require('../routes/auth'))
    }

        }


    ../routes/auth

        const { Router } = require("express");
        const { check } = require("express-validator");

        const { validarCampos } = require("../middlewares/validar-campos");


        const {login } = require('../controllers/auth')

        const router= Router()


        router.post('/',
        [
            check('correo','El correo es obligatorio').isEmail(),
            check('password',El password es obligatorio').not().empty(),
            validarCampos
        ]
        ,login)

        module.exports = router



    ../helpers/generar-jwt

        const jwt = require('jsonwebtoken')

        const generarJWT=(uid='')=>{

            return new Promise((resolve,reject) =>{
                const payload={ uid  }

                
                jwt.sign(payload,
                process.env.SECRETORPRIVATEKEY,
                {
                    expiresIn:"4h"
                },(err,token) =>{

                    if(err){
                        console.log(err);
                        reject(`No se pudo generar el token`)
                    }else{
                        resolve(token)
                    }
                }
                )
                

            })
        }

        module.exports={
            generarJWT
        }




    ../controllers/auth
    
        const { response, request } = require("express");
        const bcryptjs = require("bcryptjs");

        const Usuario = require("../models/usuario");
        const { generarJWT} = require('helpers/generar-jwt')



        const login= async (req=request,res=response) =>{
            const {correo,password}=req.body

         try{
               const usuario= await Usuario.findOne({correo})

                if(!usuario){
                 return   res.status(400).json({
                        msg:`EL usuario/password no son correctos ~ correo`
                    })
                }

                if(!usuaario.estado){
                    return res.status(400).json({
                        msg:`usuario/password no son correctos ~`estado:false
                    })
                }

                const validarPassword=bcryjs.compareSync(password,usuario.password)

                if(!validarPassword){
                    return res.status(400).json({
                        msg:`El usuario/password no son correctos ~ password`
                    })
                }
                
                //generar el token

                const token = generarJWT(usuario.id)

                res.json({
                    msg:ok,
                    usuario,
                    token
                })

         }catch(error){
            console.log(error)
            res.status(500).json({
                msg:'Hable con el administrador'
            })

         }

        }

        module.exports={
            login
        }




    ../midlewares/index

        const validaCampos = require("../middlewares/validar-campos");
        const validarJWT = require("../middlewares/validar-jwt");
        const validaRoles = require("../middlewares/validar-roles");


        module.exports={
            ...validarCampos,
            ...validarJWT,
            ...validaRoles
        }


        ----------------------------------------------------------------------
                    routes usuario
        ----------------------------------------------------------------------

   ../middlewares/validar-jwt.js

    const validarJWT= async(req=request,res=response,next) =>{

        const token = req.header('x-token')

        if(!token){
            res.status(401).json({
                msg:'No hay token en la petición'
            })
        }


     try{

           const {uid} = jwt.verify(token,process.env.SECRETORPRIVATEKEY)

        const usuario=await Usuario.findById(uid)

        if(!usuario){
            return res.status(401).json({
                msg:' token no valido - usuario no existe'
            })
        }

        if(!usuario.estado){
            return res.status(401).json({
                msg:'el token no es valido - estado false' 
            })
        }

        req.usuario=usuario

        next()
     }catch(error){

        console.log(error)
        return res.json(401.json({
            msg:'token no valido'
        }))
     }
        
    }

    module.exports={
        validarJWT
    }



    ..middlewares/validar-roles

    const { request,response} = require('express')

        const esAdminRole=(req=request,res=response, next) =>{

            if(!req.usuario){
                return res.status(500).json({
                    msg:'Se requiere validar el role sin  validar el token primero'
                })
            }
            
            const { rol,nombre } = req.usuario

            if(rol != 'ADMIN_ROLE'){
                return res.status(400).json({
                    msg:`nombre no es administrador - no puede hacer esto`
                })
            }
            next()

        }


        const tieneRole =(...roles)=>{
            return (req=request,res=response,next) =>{
                if(!req.usuario){
                    return res.status(500).json({
                        msg:'se requiere verificar el role sin validar el token primero'
                    })
                }

            if(!roles.includes(req.usuario.rol)){
                return res.status(400).json({
                    msg:`El servicio requiere uno de estos roles ${roles} 
                })
            }

            next()
                
            }
            
        }

        module.exports={
            esAdminRole,
            tieneRole
        }


   
    ../routes/usuario

    esAdminRole => Fuerza al usuario ser administador

        const {validarJWT,esAdminRole,tieneRole}=require(../middlewares)

    const router=Router()


    router.delete('/:id',[
        validarJWT,
        //esAdminRole,
        tieneRole('ADMIN_ROLE','VENTAS_ROLE','OTROS_ROLE')

    ],usuariosDelete)

    module.exports= router



        Considerar que para eliminar de forma logica se necesita tener el token(Dentro del token esta el id que luego se buscara si esta en el modelo) y el id para poder eliminarlo.

    











