
*********************************************************************
            DEFINIR LAS APLICACIONES DE CONSOLA EN UNA CARPETA
*********************************************************************


rest server
    librerias
        bcryptjs
        cors
        dotenv
        express
        express-validator
        mongoose  5.11.15

    "start":"node add.js"

        la version actual al momento de hacer esta repractica  de mongoose es la v7 .


app.js

    dptemv
    path models server

    models -> Server
        server.listen()


     server.js       
            express
            cors
            {dbConnection} fron '..database/config'

            constructor
                this.app=express()
                this.port=process.env.PORT
                this.usuariosPath='api/usuarios'


            this.conectarDB()
            this.middlewares()
            this.routes()


        async conectarDB(){
            await dbConnection()
        }

        midlewares(){
            this.app.use(cors())
            this.app.use(express.json())
            this.app.use(express.static("public"))

        }

        routes(){
            this.app.use(this.usuariosPath,require('..routes/usuarios'))
        }
        
        listen(){
            this.port,() => { console.log('servidor corriendo en el puerto',this.port) }
        }


        


        ../midleware/validar-campos

            const validationResult=require('express-validator')
            const {request,response}= require('express)

            const validarCampos= (req=request,res=response)=>{

                const errors= validationResult(req)

                if(!errors.isEmpty()){
                   return  res.status(400).json(errors)
                }

            }

            module.exports=validarCampos



        ../helpers/db-validators

            const Usuario= require(../models/usuario)

            const emailExiste= async(correo='')=>{

                const existeEmail= await usuario.findOne({correo})

                if(existeEmail){
                    throw new Error(`El correo: ${correo} ya esta registrado`)
                }
            }



        ../routes/usuarios.js
            {Router} fron 'express'
            {check} fron 'express-validator


            {validarCampos} from '..midlewares/validar-campos'

            {esRoleValido,emailExiste,existeUsuarioPorId} from '../helpers/db-validator'


            {usuariosGet,usuariosPut,usuariosPost,usuariosDelete,usuariosPatch} fron '..controlers/usuarios'


            const Usuario = require('../models/usuario')
              


        const router = Router()

        router.get('/',usuariosGet)

        router.put('/:id', [
            check('id','No es un id valido',isMongoId()),
            check('id').custom(existeUsuarioPorId),
            check('role').custon(esRoleValido),
            validarCampos
        ], usuariosPut)

        router.post('/',[... , validarCampos],usuariosPost)

            const{nombre,correo,password,rol} = req.body

        router.delete('/:id',[... , validarCampos],usuariosDelete)

        router.patch('/',usuariosPatch)


        module.exports = router


    
    ..models/usuario.js

    const {Schema,model} = require('mongoose')

    usuarioSchema= Schema({
        nombre
            type
            required
        correo
            type
            required
            unique
        password
            type
            required
        img
            type
        rol
            type
            required
            enum
        estado
            type
            default
        google
            type
            default

    })

    UsuarioSchema.method.toJSON = function(){
        const { __v,password,...usuarios} =this.toObject()
        return usuarios
    }

    module.exports= model('Usuario',UsuarioSchema)



    ../controllers/usuarios

        const {request,response}= require('express)
        const bcryptjs = require('bcryptjs')


            const usuariosPut= (req= request,res= response) =>{

                const {id}= req.params

                const {_id,password,correo,google,...resto}=req.body

                if(password){

                    const salt= bcryptjs.genSaltSync()
                    resto.password=bcryptjs.hashSync(password,salt)
                }

                const usuario= await Usuario.findByIdAndUpdate(id,resto)

                res.json(usuario)
            }



        ** de la misma forma con los demas metodos (post,delete,etc)


        accesos a la api

            get
                localhost:8080/api/usuarios?limite=7&desde=0
            post
                http://localhost:8090/api/usuarios/
            put
                http://localhost:8090/api/usuarios/6442dd8d5686745767a12f96
            delete
                http://localhost:8090/api/usuarios/6442dd8d5686745767a12f96


        